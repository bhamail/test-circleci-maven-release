version: 2.1
orbs:
  orb-tools: circleci/orb-tools@8.27.4

  my-inline-maven-release-orb:
    version: 2.1
    description: >
      Run the maven-release-plugin in CircleCI. This Orb allows publishing of build
      artifacts by invoking the maven-release-plugin. The source for this Orb is
      available at: https://github.com/sonatype-nexus-community/circleci-maven-release-orb
      Large chunks taken from this excellent Orb: https://github.com/bbottema-circleci/circleci-orbs
      Thanks Benny!

    executors:
      maven-executor:
        description: "CircleCI provided docker image with OpenJDK installed. see: https://circleci.com/docs/2.0/circleci-images/#openjdk"
        docker:
          - image: circleci/openjdk:8-jdk

    deploy-defaults: &JOB_DEPLOY_DEFAULTS
      parameters:
        executor:
          type: executor
          default: maven-executor
        mvn-release-prepare-command:
          type: string
          default: mvn --batch-mode release:prepare
        mvn-release-perform-command:
          type: string
          default: mvn --batch-mode release:perform -s .circleci/.maven.xml
      executor: <<parameters.executor>>

    commands:
      configure-gpg:
        steps:
          - run:
              name: Configure GPG private key for signing project artifacts in OSS Sonatype
              command: |
                echo $SECRING_GPG_ASC_BASE64 | base64 --decode | gpg --batch --no-tty --import --yes

      configure-git:
        steps:
          - run:
              name: Configure GIT with host fingerprint, user info and SSH key for pushing
              command: |
                mkdir -p ~/.ssh
                echo "Adding github.com as known host..."
                echo $GITHUB_FINGERPRINT >> ~/.ssh/known_hosts
                echo "Setting private SSH key for pushing new version to repo..."
                echo $GITHUB_COMMIT_KEY | base64 --decode >> ~/.ssh/id_rsa
                chmod 400 ~/.ssh/id_rsa # prevents "UNPROTECTED PRIVATE KEY FILE" error
                git config user.name "$GITHUB_USERNAME"
                git config user.email "$GITHUB_EMAIL"

      maven-release:
        parameters:
          mvn-release-prepare-command:
            type: string
          mvn-release-perform-command:
            type: string
        steps:
          - checkout
          - attach_workspace:
              at: .
          - restore_cache:
              key: maven-release-orb-{{ checksum ".circleci/config.yml" }}
          - configure-gpg
          - configure-git
          - run:
              name: Release new version to Maven Central and push new project version to repo
              command: |
                echo "Starting new release..."
                MVN_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                echo "Preparing release from version ${MVN_VERSION}..."
                << parameters.mvn-release-prepare-command >>
                echo "Generated release.properties: ..."
                cat release.properties
                << parameters.mvn-release-perform-command >>
                echo "Release completed"
                MVN_VERSION_NEXT_DEV=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                echo "New development version ${MVN_VERSION_NEXT_DEV}"
          - save_cache:
              paths:
                - ~/.m2
              key: maven-release-orb-{{ checksum ".circleci/config.yml" }}

    jobs:
      run-maven-release:
        <<: *JOB_DEPLOY_DEFAULTS
        steps:
          - maven-release:
              mvn-release-prepare-command: << parameters.mvn-release-prepare-command >>
              mvn-release-perform-command: << parameters.mvn-release-perform-command >>


jobs:
  extract-job:
    docker:
      - image: circleci/ruby
    steps:
      - checkout
      - orb-tools/extract-inline-orb:
          orb: my-inline-maven-release-orb
          source: .circleci/config-inline.yml

  dry-run-job:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      dryRun: true
    steps:
      #- checkout
      #- my-inline-maven-release-orb/run-maven-release
      #- circleci-maven-release-orb/run-maven-release
      #- run-maven-release
      - run:
          name: Check Dry Run results
          command: |
            FAILED_CHECK=false
            echo "Checking gpg setup..."
            gpgDir=/home/circleci/.gnupg/
            if [ ! -f "$gpgDir" ]; then
              echo "Missing gpg dir: $gpgDir"
              FAILED_CHECK=true
            fi
            gpgPubKeyFile="$gpgDir/pubring.kbx"
            if [ ! -f "$gpgPubKeyFile" ]; then
              echo "Missing gpg pub key file: $gpgPubKeyFile"
              FAILED_CHECK=true
            fi

            echo "Checking git setup..."
            knownHosts=~/.ssh/known_hosts
            if [ ! -f "$knownHosts" ]; then
              echo "Missing knownHosts file: $knownHosts"
              FAILED_CHECK=true
            fi
            idRsa=~/.ssh/id_rsa
            if [ ! -f "$idRsa" ]; then
              echo "Missing knownHosts file: idRsa"
              FAILED_CHECK=true
            fi
            gitUser=$(git config user.name)
            if [ ! "$gitUser" = "$GITHUB_USERNAME" ]; then
              echo "Missing git user name: $gitUser"
              FAILED_CHECK=true
            fi
            gitEmail=$(git config user.email)
            if [ ! "$gitEmail" = "$GITHUB_EMAIL" ]; then
              echo "Missing git email address: gitEmail"
              FAILED_CHECK=true
            fi


            releasePropsFile=release.properties
            if [ ! -f "$releasePropsFile" ]; then
              echo "Missing release properties file: $releasePropsFile"
              FAILED_CHECK=true
            fi

            if [ "$FAILED_CHECK" = true ]; then
              echo "Exiting with failure: $FAILED_CHECK"
              exit 1
            fi


mvn-release-prepare-command: &mvn-release-prepare-command-dryRun
  # add -DdryRun=true
  mvn-release-prepare-command: mvn --batch-mode -DdryRun=true release:prepare

mvn-release-perform-command: &mvn-release-perform-command-dryRun
  # add -DdryRun=true
  mvn-release-perform-command: mvn --batch-mode -DdryRun=true release:perform -s .circleci/.maven.xml

workflows:
  main:
    jobs:
      - my-inline-maven-release-orb/run-maven-release:
          <<: *mvn-release-prepare-command-dryRun
          <<: *mvn-release-perform-command-dryRun
      #- circleci-maven-release-orb/run-maven-release:
      #    <<: *mvn-release-prepare-command-dryRun
      #    <<: *mvn-release-perform-command-dryRun
      - extract-job
      - dry-run-job
